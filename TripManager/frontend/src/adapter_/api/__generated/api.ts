/* tslint:disable */
/* eslint-disable */
/**
 * home-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AxiosInstance, AxiosPromise, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
import type { Configuration } from "./configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import type { RequestArgs } from "./base";
import {
  DUMMY_BASE_URL,
  assertParamExists,
  createRequestFunction,
  serializeDataIfNeeded,
  setSearchParams,
  toPathString,
} from "./common";
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError, operationServerMap } from "./base";

/**
 *
 * @export
 * @interface Destination
 */
export interface Destination {
  /**
   * A uniqe destination identifier
   * @type {string}
   * @memberof Destination
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Destination
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Destination
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof Destination
   */
  activities?: string;
  /**
   * start date of the trip destination
   * @type {string}
   * @memberof Destination
   */
  start?: string;
  /**
   * end date of the trip destination
   * @type {string}
   * @memberof Destination
   */
  end?: string;
  /**
   *
   * @type {Array<Trip>}
   * @memberof Destination
   */
  trips: Array<Trip>;
  /**
   *
   * @type {string}
   * @memberof Destination
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Destination
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface PostDestinationsRequest
 */
export interface PostDestinationsRequest {
  /**
   *
   * @type {string}
   * @memberof PostDestinationsRequest
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof PostDestinationsRequest
   */
  description: string;
  /**
   *
   * @type {any}
   * @memberof PostDestinationsRequest
   */
  trips: any;
  /**
   *
   * @type {string}
   * @memberof PostDestinationsRequest
   */
  start?: string;
  /**
   *
   * @type {string}
   * @memberof PostDestinationsRequest
   */
  end?: string;
  /**
   *
   * @type {string}
   * @memberof PostDestinationsRequest
   */
  activities?: string;
}
/**
 *
 * @export
 * @interface PostTripsRequest
 */
export interface PostTripsRequest {
  /**
   *
   * @type {string}
   * @memberof PostTripsRequest
   */
  name: string;
  /**
   *
   * @type {any}
   * @memberof PostTripsRequest
   */
  destinations?: any;
  /**
   *
   * @type {string}
   * @memberof PostTripsRequest
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof PostTripsRequest
   */
  participants?: string;
  /**
   * start date of the trip
   * @type {string}
   * @memberof PostTripsRequest
   */
  start: string;
  /**
   * start date of the trip
   * @type {string}
   * @memberof PostTripsRequest
   */
  end: string;
}
/**
 *
 * @export
 * @interface PutDestinationsDestIdRequest
 */
export interface PutDestinationsDestIdRequest {
  /**
   *
   * @type {string}
   * @memberof PutDestinationsDestIdRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PutDestinationsDestIdRequest
   */
  start?: string;
  /**
   *
   * @type {string}
   * @memberof PutDestinationsDestIdRequest
   */
  end?: string;
  /**
   *
   * @type {string}
   * @memberof PutDestinationsDestIdRequest
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof PutDestinationsDestIdRequest
   */
  activities?: string;
  /**
   *
   * @type {any}
   * @memberof PutDestinationsDestIdRequest
   */
  trips?: any;
}
/**
 *
 * @export
 * @interface PutTripsTripIdRequest
 */
export interface PutTripsTripIdRequest {
  /**
   *
   * @type {string}
   * @memberof PutTripsTripIdRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PutTripsTripIdRequest
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof PutTripsTripIdRequest
   */
  start?: string;
  /**
   *
   * @type {string}
   * @memberof PutTripsTripIdRequest
   */
  end?: string;
  /**
   *
   * @type {any}
   * @memberof PutTripsTripIdRequest
   */
  destinations?: any;
  /**
   *
   * @type {string}
   * @memberof PutTripsTripIdRequest
   */
  participants?: string;
}
/**
 *
 * @export
 * @interface Trip
 */
export interface Trip {
  /**
   *
   * @type {string}
   * @memberof Trip
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof Trip
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Trip
   */
  description: string;
  /**
   *
   * @type {Array<Destination>}
   * @memberof Trip
   */
  destinations?: Array<Destination>;
  /**
   *
   * @type {string}
   * @memberof Trip
   */
  participants?: string;
  /**
   *
   * @type {string}
   * @memberof Trip
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Trip
   */
  updatedAt?: string;
  /**
   * start date of the trip
   * @type {string}
   * @memberof Trip
   */
  start?: string;
  /**
   * end date of the trip
   * @type {string}
   * @memberof Trip
   */
  end?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDestinations: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/Destinations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDestinationsDestId: async (
      destId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'destId' is not null or undefined
      assertParamExists("deleteDestinationsDestId", "destId", destId);
      const localVarPath = `/Destinations/{destId}`.replace(
        `{${"destId"}}`,
        encodeURIComponent(String(destId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrips: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/Trips`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} tripId ID of the Trip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTripsTripId: async (
      tripId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tripId' is not null or undefined
      assertParamExists("deleteTripsTripId", "tripId", tripId);
      const localVarPath = `/Trips/{tripId}`.replace(
        `{${"tripId"}}`,
        encodeURIComponent(String(tripId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * delete a specific destination from a trip
     * @summary
     * @param {string} tripId
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTripsTripIdDestinationDestId: async (
      tripId: string,
      destId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tripId' is not null or undefined
      assertParamExists("deleteTripsTripIdDestinationDestId", "tripId", tripId);
      // verify required parameter 'destId' is not null or undefined
      assertParamExists("deleteTripsTripIdDestinationDestId", "destId", destId);
      const localVarPath = `/Trips/{tripId}/destination/{destId}`
        .replace(`{${"tripId"}}`, encodeURIComponent(String(tripId)))
        .replace(`{${"destId"}}`, encodeURIComponent(String(destId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDestinations: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/Destinations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDestinationsDestId: async (
      destId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'destId' is not null or undefined
      assertParamExists("getDestinationsDestId", "destId", destId);
      const localVarPath = `/Destinations/{destId}`.replace(
        `{${"destId"}}`,
        encodeURIComponent(String(destId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieve the information of the user with the matching user ID.
     * @summary Get Trips
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrips: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/Trips`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTripsDestinationName: async (
      name: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getTripsDestinationName", "name", name);
      const localVarPath = `/Trips/destinationName`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get all trips that have a specific name or start on a specific date
     * @summary Your GET endpoint
     * @param {string} name
     * @param {string} start
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTripsSearchNameStart: async (
      name: string,
      start: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists("getTripsSearchNameStart", "name", name);
      // verify required parameter 'start' is not null or undefined
      assertParamExists("getTripsSearchNameStart", "start", start);
      const localVarPath = `/Trips/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (start !== undefined) {
        localVarQueryParameter["start"] = start;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} tripId ID of the Trip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTripsTripId: async (
      tripId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tripId' is not null or undefined
      assertParamExists("getTripsTripId", "tripId", tripId);
      const localVarPath = `/Trips/{tripId}`.replace(
        `{${"tripId"}}`,
        encodeURIComponent(String(tripId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * get a specefic destination from a trip
     * @summary Your GET endpoint
     * @param {string} tripId
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTripsTripIdDestinationDestId: async (
      tripId: string,
      destId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tripId' is not null or undefined
      assertParamExists("getTripsTripIdDestinationDestId", "tripId", tripId);
      // verify required parameter 'destId' is not null or undefined
      assertParamExists("getTripsTripIdDestinationDestId", "destId", destId);
      const localVarPath = `/Trips/{tripId}/destination/{destId}`
        .replace(`{${"tripId"}}`, encodeURIComponent(String(tripId)))
        .replace(`{${"destId"}}`, encodeURIComponent(String(destId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {PostDestinationsRequest} [postDestinationsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDestinations: async (
      postDestinationsRequest?: PostDestinationsRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/Destinations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postDestinationsRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {PostTripsRequest} [postTripsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTrips: async (
      postTripsRequest?: PostTripsRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/Trips`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postTripsRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * add one or more destinations to a Trip
     * @summary
     * @param {string} tripId
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTripsTripIdDestination: async (
      tripId: string,
      requestBody?: Array<string>,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tripId' is not null or undefined
      assertParamExists("postTripsTripIdDestination", "tripId", tripId);
      const localVarPath = `/Trips/{tripId}/destination`.replace(
        `{${"tripId"}}`,
        encodeURIComponent(String(tripId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} destId
     * @param {PutDestinationsDestIdRequest} [putDestinationsDestIdRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDestinationsDestId: async (
      destId: string,
      putDestinationsDestIdRequest?: PutDestinationsDestIdRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'destId' is not null or undefined
      assertParamExists("putDestinationsDestId", "destId", destId);
      const localVarPath = `/Destinations/{destId}`.replace(
        `{${"destId"}}`,
        encodeURIComponent(String(destId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putDestinationsDestIdRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary
     * @param {string} tripId ID of the Trip
     * @param {PutTripsTripIdRequest} [putTripsTripIdRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTripsTripId: async (
      tripId: string,
      putTripsTripIdRequest?: PutTripsTripIdRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'tripId' is not null or undefined
      assertParamExists("putTripsTripId", "tripId", tripId);
      const localVarPath = `/Trips/{tripId}`.replace(
        `{${"tripId"}}`,
        encodeURIComponent(String(tripId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        putTripsTripIdRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDestinations(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteDestinations(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.deleteDestinations"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDestinationsDestId(
      destId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteDestinationsDestId(
          destId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.deleteDestinationsDestId"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTrips(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrips(
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.deleteTrips"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {string} tripId ID of the Trip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTripsTripId(
      tripId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTripsTripId(tripId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.deleteTripsTripId"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * delete a specific destination from a trip
     * @summary
     * @param {string} tripId
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTripsTripIdDestinationDestId(
      tripId: string,
      destId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteTripsTripIdDestinationDestId(
          tripId,
          destId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.deleteTripsTripIdDestinationDestId"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDestinations(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Destination>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDestinations(
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.getDestinations"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDestinationsDestId(
      destId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Destination>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getDestinationsDestId(destId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.getDestinationsDestId"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retrieve the information of the user with the matching user ID.
     * @summary Get Trips
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTrips(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trip>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTrips(
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.getTrips"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTripsDestinationName(
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trip>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTripsDestinationName(name, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.getTripsDestinationName"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * get all trips that have a specific name or start on a specific date
     * @summary Your GET endpoint
     * @param {string} name
     * @param {string} start
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTripsSearchNameStart(
      name: string,
      start: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trip>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTripsSearchNameStart(
          name,
          start,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.getTripsSearchNameStart"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {string} tripId ID of the Trip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTripsTripId(
      tripId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trip>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTripsTripId(
        tripId,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.getTripsTripId"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * get a specefic destination from a trip
     * @summary Your GET endpoint
     * @param {string} tripId
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTripsTripIdDestinationDestId(
      tripId: string,
      destId: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Destination>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTripsTripIdDestinationDestId(
          tripId,
          destId,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.getTripsTripIdDestinationDestId"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {PostDestinationsRequest} [postDestinationsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postDestinations(
      postDestinationsRequest?: PostDestinationsRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postDestinations(
          postDestinationsRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.postDestinations"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {PostTripsRequest} [postTripsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postTrips(
      postTripsRequest?: PostTripsRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trip>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postTrips(
        postTripsRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.postTrips"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * add one or more destinations to a Trip
     * @summary
     * @param {string} tripId
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postTripsTripIdDestination(
      tripId: string,
      requestBody?: Array<string>,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postTripsTripIdDestination(
          tripId,
          requestBody,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.postTripsTripIdDestination"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {string} destId
     * @param {PutDestinationsDestIdRequest} [putDestinationsDestIdRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putDestinationsDestId(
      destId: string,
      putDestinationsDestIdRequest?: PutDestinationsDestIdRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.putDestinationsDestId(
          destId,
          putDestinationsDestIdRequest,
          options
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.putDestinationsDestId"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary
     * @param {string} tripId ID of the Trip
     * @param {PutTripsTripIdRequest} [putTripsTripIdRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putTripsTripId(
      tripId: string,
      putTripsTripIdRequest?: PutTripsTripIdRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putTripsTripId(
        tripId,
        putTripsTripIdRequest,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.putTripsTripId"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDestinations(options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteDestinations(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDestinationsDestId(
      destId: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deleteDestinationsDestId(destId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrips(options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteTrips(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} tripId ID of the Trip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTripsTripId(tripId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteTripsTripId(tripId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * delete a specific destination from a trip
     * @summary
     * @param {string} tripId
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTripsTripIdDestinationDestId(
      tripId: string,
      destId: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .deleteTripsTripIdDestinationDestId(tripId, destId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDestinations(options?: any): AxiosPromise<Array<Destination>> {
      return localVarFp
        .getDestinations(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDestinationsDestId(
      destId: string,
      options?: any
    ): AxiosPromise<Destination> {
      return localVarFp
        .getDestinationsDestId(destId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieve the information of the user with the matching user ID.
     * @summary Get Trips
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrips(options?: any): AxiosPromise<Array<Trip>> {
      return localVarFp
        .getTrips(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Your GET endpoint
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTripsDestinationName(
      name: string,
      options?: any
    ): AxiosPromise<Array<Trip>> {
      return localVarFp
        .getTripsDestinationName(name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get all trips that have a specific name or start on a specific date
     * @summary Your GET endpoint
     * @param {string} name
     * @param {string} start
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTripsSearchNameStart(
      name: string,
      start: string,
      options?: any
    ): AxiosPromise<Array<Trip>> {
      return localVarFp
        .getTripsSearchNameStart(name, start, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} tripId ID of the Trip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTripsTripId(tripId: string, options?: any): AxiosPromise<Trip> {
      return localVarFp
        .getTripsTripId(tripId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * get a specefic destination from a trip
     * @summary Your GET endpoint
     * @param {string} tripId
     * @param {string} destId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTripsTripIdDestinationDestId(
      tripId: string,
      destId: string,
      options?: any
    ): AxiosPromise<Destination> {
      return localVarFp
        .getTripsTripIdDestinationDestId(tripId, destId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {PostDestinationsRequest} [postDestinationsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDestinations(
      postDestinationsRequest?: PostDestinationsRequest,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .postDestinations(postDestinationsRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {PostTripsRequest} [postTripsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTrips(
      postTripsRequest?: PostTripsRequest,
      options?: any
    ): AxiosPromise<Trip> {
      return localVarFp
        .postTrips(postTripsRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * add one or more destinations to a Trip
     * @summary
     * @param {string} tripId
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postTripsTripIdDestination(
      tripId: string,
      requestBody?: Array<string>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .postTripsTripIdDestination(tripId, requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} destId
     * @param {PutDestinationsDestIdRequest} [putDestinationsDestIdRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDestinationsDestId(
      destId: string,
      putDestinationsDestIdRequest?: PutDestinationsDestIdRequest,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .putDestinationsDestId(destId, putDestinationsDestIdRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary
     * @param {string} tripId ID of the Trip
     * @param {PutTripsTripIdRequest} [putTripsTripIdRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putTripsTripId(
      tripId: string,
      putTripsTripIdRequest?: PutTripsTripIdRequest,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .putTripsTripId(tripId, putTripsTripIdRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteDestinations(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteDestinations(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} destId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteDestinationsDestId(
    destId: string,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteDestinationsDestId(destId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteTrips(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteTrips(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} tripId ID of the Trip
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteTripsTripId(tripId: string, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteTripsTripId(tripId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * delete a specific destination from a trip
   * @summary
   * @param {string} tripId
   * @param {string} destId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteTripsTripIdDestinationDestId(
    tripId: string,
    destId: string,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteTripsTripIdDestinationDestId(tripId, destId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Your GET endpoint
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getDestinations(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getDestinations(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Your GET endpoint
   * @param {string} destId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getDestinationsDestId(
    destId: string,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getDestinationsDestId(destId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Retrieve the information of the user with the matching user ID.
   * @summary Get Trips
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTrips(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getTrips(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Your GET endpoint
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTripsDestinationName(
    name: string,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getTripsDestinationName(name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get all trips that have a specific name or start on a specific date
   * @summary Your GET endpoint
   * @param {string} name
   * @param {string} start
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTripsSearchNameStart(
    name: string,
    start: string,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getTripsSearchNameStart(name, start, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} tripId ID of the Trip
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTripsTripId(tripId: string, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getTripsTripId(tripId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * get a specefic destination from a trip
   * @summary Your GET endpoint
   * @param {string} tripId
   * @param {string} destId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTripsTripIdDestinationDestId(
    tripId: string,
    destId: string,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getTripsTripIdDestinationDestId(tripId, destId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {PostDestinationsRequest} [postDestinationsRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postDestinations(
    postDestinationsRequest?: PostDestinationsRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postDestinations(postDestinationsRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {PostTripsRequest} [postTripsRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postTrips(
    postTripsRequest?: PostTripsRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postTrips(postTripsRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * add one or more destinations to a Trip
   * @summary
   * @param {string} tripId
   * @param {Array<string>} [requestBody]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public postTripsTripIdDestination(
    tripId: string,
    requestBody?: Array<string>,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .postTripsTripIdDestination(tripId, requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} destId
   * @param {PutDestinationsDestIdRequest} [putDestinationsDestIdRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putDestinationsDestId(
    destId: string,
    putDestinationsDestIdRequest?: PutDestinationsDestIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putDestinationsDestId(destId, putDestinationsDestIdRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary
   * @param {string} tripId ID of the Trip
   * @param {PutTripsTripIdRequest} [putTripsTripIdRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public putTripsTripId(
    tripId: string,
    putTripsTripIdRequest?: PutTripsTripIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .putTripsTripId(tripId, putTripsTripIdRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
